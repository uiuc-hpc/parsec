set(PARSEC_VERSION @PARSEC_VERSION_MAJOR@.@PARSEC_VERSION_MINOR@.@PARSEC_VERSION_RELEASE@)

@PACKAGE_INIT@

set_and_check(PARSEC_DIR "${PACKAGE_PREFIX_DIR}")
set_and_check(PARSEC_INCLUDE_DIRS "@PACKAGE_PARSEC_INSTALL_INCLUDEDIR@")
set_and_check(PARSEC_CMAKE_DIRS "@PACKAGE_PARSEC_INSTALL_CMAKEDIR@")
set_and_check(PARSEC_LIBRARY_DIRS "@PACKAGE_PARSEC_INSTALL_LIBDIR@")
set_and_check(PARSEC_BINARY_DIRS "@PACKAGE_PARSEC_INSTALL_BINDIR@")
set(PARSEC_LIBEXEC_DIRS "@PACKAGE_PARSEC_INSTALL_LIBEXECDIR@") # This is optional, may not exist in the installdir

# Pull the dependencies
list(APPEND CMAKE_PREFIX_PATH "${PARSEC_CMAKE_DIRS}")
list(APPEND CMAKE_MODULE_PATH "${PARSEC_CMAKE_DIRS}")

find_package(Threads)

if(@PARSEC_HAVE_HWLOC@)
  # If HWLOC is found on the system directories the HWLOC_DIR is set to ""
  if("@HWLOC_DIR@")
    set_and_check(HWLOC_DIR "@HWLOC_DIR@")
  endif("@HWLOC_DIR@")
  find_package(HWLOC REQUIRED)
endif(@PARSEC_HAVE_HWLOC@)

if(@PARSEC_HAVE_OTF2@)
  # Nothing exportable here, if this test succeed then PaRSEC supports OTF2 output.
endif(@PARSEC_HAVE_OTF2@)

if(@PARSEC_HAVE_PAPI@)
# set_and_check(PAPI_INCLUDE_DIR "@PAPI_INCLUDE_DIR@")
# set_and_check(PAPI_LIBRARY "@PAPI_LIBRARY@")
  find_package(PAPI REQUIRED)
endif(@PARSEC_HAVE_PAPI@)

if(@PARSEC_DIST_WITH_MPI@)
  # Otherwise try to find MPI in the normal way
  find_package(MPI REQUIRED)
endif(@PARSEC_DIST_WITH_MPI@)

if(@PARSEC_DIST_WITH_LCI@)
  find_package(LCI REQUIRED)
endif(@PARSEC_DIST_WITH_LCI@)

if(@PARSEC_HAVE_CUDA@)
  find_package(CUDA REQUIRED)
  SET(PARSEC_HAVE_CUDA TRUE)
endif(@PARSEC_HAVE_CUDA@)

if(@PARSEC_PROF_TRACE@)
  # Nothing exportable here, if this test succeed then PaRSEC supports tracing
endif(@PARSEC_PROF_TRACE@)

# Pull the PaRSEC::<targets>
if(NOT TARGET PaRSEC::parsec)
  include(${CMAKE_CURRENT_LIST_DIR}/PaRSECTargets.cmake)
endif(NOT TARGET PaRSEC::parsec)

# Populate the variables

set(PARSEC_PTGFLAGS "$ENV{PTGFLAGS}" CACHE STRING "Flags to pass to the parsec-ptgpp executable")
set(PARSEC_PTGPP_EXECUTABLE ${PARSEC_BINARY_DIRS}/parsec-ptgpp CACHE STRING "Point to the parsec-ptgpp executable")
set(PARSEC_LIBRARIES PaRSEC::parsec CACHE STRING "List of libraries suitable for use in target_link_libraries") # for compatibility with older (non-target based) clients
